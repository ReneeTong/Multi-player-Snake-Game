game-bluepotatodragon_game created by GitHub Classroom 
11/14:We began setting up our project, mainly just reading through the instructions and 
getting an idea of all the work we needed to do 
11/17: We started with sending our name and server address to the server and started to receive data.
We started working on the logic for parsing the data received by the server.
11/19: We continued writing our process messages method. 
We decided to use 3 seperate Jtokens to parse all of the json objects Still figuring out how to handle all the data. 
11/20: We started trying to draw things onto the panel. We started by replacing the default images and then seeing
our new images onto the panel, but not much else. Our data parsing is still having some trouble, so we are mainly working on that. 
11/25: We continued working on processing messages sent by the server as cleanly as possible. We also started finally drawing more things to the panel, 
such as powerups and points where our snake's body is. We also decided we wanted our game to be space themed. Our background is meant to be outer space, which is just a 
black screen with white dots to represent stars in space. We also liked a certain image of a unicorn that we thought was funny, so that is our wall image. 
We will continue with space theming our game in PS9 as well.	
11/26: We worked on processing messages most of the day, since that would keep of from being able to draw on the panel.
We encountered some strange behavior that we thought was a mac vs windows issue, but we weren't sure. Also if possible, we would appreciate it if a TA with a windows computer graded this.
11/27: We did most of our drawing today and finalized receiving messages. We had to structure many statements to take care of edge cases
within the data receiving. Sometimes data will not come all at once due to how TCP works, and so we had to account for that. All that is left to do is some minor details.
11/28: Today we took care of small bugs within processing messages, as well as adding minor details. 
We fixed some of the walls positions, added explosion effects for when you die, and added comments to make our code a bit easier to read. We also ran into a strange bug today.
We would receive data split into 2 parts sometimes, and would very occasionally/rarely get an error saying that our JSON couldn't be parsed. We figured out that data could be
split into multiple parts that are broken, and we then fixed it so that data would append until it was a full JSON string. So now no matter how broken a JSON string is, it will
be able to be parsed. This was our biggest struggle with this assignment that we have finally overcome. 
11/29: Today we started PS9. We started by adding the settings file to our solution and deserializing it into a game settings class. 
11/30: We drew the walls onto the world and attempted to draw a snake by sending a random snake to the client.
12/1: We began calculating movement logic for our snake. At the moment, our tail does not catch up to our body correctly. We think this is because the coordinate position of the tail does not exactly match the turning point, so we may have to look for inequality rather than equality of the point with the tail when it turns 
12/3: We had some trouble creating a second constructor for the snake class. We asked a couple TA’s how to correctly call the base constructor from our second constructor, but it did not work correctly. Our two snake constructors have a lot of repeated code due to this. We know this is bad software practice, but we did not end up finding a way around this. 
12/4: We started working on collisions with walls. We found that the logic for colliding walls was actually very similar to that of drawing walls. We also worked out snake self collision, and now have to do powerup collision and collisions with other snakes. 
12/5 - 6: We now have power ups that draw on the map at random locations. The snake collision with other snakes was an issue today. For some reason, putting the other snake collision above the self snake collision would make our own snake collide with itself. Rearranging our code fixed the problem. There is a lot of repeated code in our snakeworld class. This code is logic for detecting collisions between multiple objects. We wanted to have all this logic in one method that we could call over and over again so we wouldn't have a lot of hard to look at code in our world, since collision logic is a bit complicated. However, there are so many different cases to account for when collisions happen. We were unable to make one generic method that we could pass values into for every case of collision, which is why you will see a lot of repeated code in our snakeworld class. 
12/7: Both of our laptops have trouble being able to handle AI clients. Our TA says that it is probably because our laptops are a bit old. We were unable to accept AI clients at first due to not handling the creation of snakes for them correctly, as well as errors in our snake collision code. We handled these issues and were able to get AI clients onto our screen. Our power ups correctly spawn, and our snakes now respawn at random positions correctly. 
12/8: We did not include a new game mode. We came across an error during the TA hours today regarding the AI clients. When AI clients disconnected, they would stay on the screen even though they were removed. The TA’s told us that a lot of people were having that problem and they too were not sure what to do, so this issue took up an unexpected amount of time today that we had planned to use for implementing the new game mode. We eventually figured out this bug very late at night and realized we were not sending the disconnected snake correctly. Other than that, all we did was fix some minor details such as implementing the wrap around the world and not being able to let a snake do a 180 degree turn. There were still some minor bugs in our collision code which we also fixed, which was mostly just us using the wrong variables. We also ran into an issue where we cannot spawn AI clients before we connect to the server ourselves. If we connect first and then spawn AI clients, it works just fine. We had no guidance on how to solve this problem, so we just wanted to inform you that we know that this doesn’t work. Also, as I said earlier our laptops had some performance issues when we spawned multiple clients. It began to be really hard to debug with more than 2 clients because our game was not running smoothly. The TA we asked about this said that this could also just be an issue with our laptops not being the best. We just want to acknowledge that we are unsure of any further errors that could have come up with a lot more clients connected since we couldn’t see them very well. 


